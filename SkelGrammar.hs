-- Haskell module generated by the BNF converter

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module SkelGrammar where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified AbsGrammar

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: AbsGrammar.Ident -> Result
transIdent x = case x of
  AbsGrammar.Ident string -> failure x

transProgram :: AbsGrammar.Program -> Result
transProgram x = case x of
  AbsGrammar.Prog decls -> failure x

transBlock :: AbsGrammar.Block -> Result
transBlock x = case x of
  AbsGrammar.Blk decls stmts -> failure x

transDecl :: AbsGrammar.Decl -> Result
transDecl x = case x of
  AbsGrammar.VarDecl type_ ident -> failure x
  AbsGrammar.FnDecl type_ ident args block -> failure x

transArg :: AbsGrammar.Arg -> Result
transArg x = case x of
  AbsGrammar.ValArg type_ ident -> failure x
  AbsGrammar.RefArg type_ ident -> failure x

transStmt :: AbsGrammar.Stmt -> Result
transStmt x = case x of
  AbsGrammar.Empty -> failure x
  AbsGrammar.BStmt block -> failure x
  AbsGrammar.Ass ident expr -> failure x
  AbsGrammar.Ret expr -> failure x
  AbsGrammar.VRet -> failure x
  AbsGrammar.Cond expr stmt -> failure x
  AbsGrammar.CondElse expr stmt1 stmt2 -> failure x
  AbsGrammar.While expr stmt -> failure x
  AbsGrammar.Interrupt inter -> failure x
  AbsGrammar.SExp expr -> failure x
  AbsGrammar.Print expr -> failure x

transInter :: AbsGrammar.Inter -> Result
transInter x = case x of
  AbsGrammar.Break -> failure x
  AbsGrammar.Continue -> failure x

transExpr :: AbsGrammar.Expr -> Result
transExpr x = case x of
  AbsGrammar.EVar ident -> failure x
  AbsGrammar.ELitInt integer -> failure x
  AbsGrammar.ELitTrue -> failure x
  AbsGrammar.ELitFalse -> failure x
  AbsGrammar.EApp ident exprs -> failure x
  AbsGrammar.EString string -> failure x
  AbsGrammar.Neg expr -> failure x
  AbsGrammar.Not expr -> failure x
  AbsGrammar.EMul expr1 mulop expr2 -> failure x
  AbsGrammar.EAdd expr1 addop expr2 -> failure x
  AbsGrammar.ERel expr1 relop expr2 -> failure x
  AbsGrammar.EAnd expr1 expr2 -> failure x
  AbsGrammar.EOr expr1 expr2 -> failure x

transAddOp :: AbsGrammar.AddOp -> Result
transAddOp x = case x of
  AbsGrammar.Plus -> failure x
  AbsGrammar.Minus -> failure x

transMulOp :: AbsGrammar.MulOp -> Result
transMulOp x = case x of
  AbsGrammar.Times -> failure x
  AbsGrammar.Div -> failure x
  AbsGrammar.Mod -> failure x

transRelOp :: AbsGrammar.RelOp -> Result
transRelOp x = case x of
  AbsGrammar.LTH -> failure x
  AbsGrammar.LE -> failure x
  AbsGrammar.GTH -> failure x
  AbsGrammar.GE -> failure x
  AbsGrammar.EQU -> failure x
  AbsGrammar.NE -> failure x

transType :: AbsGrammar.Type -> Result
transType x = case x of
  AbsGrammar.Int -> failure x
  AbsGrammar.Str -> failure x
  AbsGrammar.Bool -> failure x
  AbsGrammar.Void -> failure x
  AbsGrammar.Fun type_ types -> failure x
